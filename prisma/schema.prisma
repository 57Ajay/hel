// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id          String    @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  country     String
  phone       String
  email       String?  @unique
  website     String?
  doctors     Doctor[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Doctor {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  email         String        @unique
  phone         String
  speciality    String
  qualification String
  experience    Int
  hospitalId    String
  hospital      Hospital      @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  available     Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([hospitalId])
}

model Patient {
  id              String           @id @default(uuid())
  firstName       String
  lastName        String
  email           String           @unique
  phone           String
  dateOfBirth     DateTime
  gender          Gender
  address         String
  appointments    Appointment[]
  medicalRecords  MedicalRecord[]
  emergencyContact EmergencyContact?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Appointment {
  id          String    @id @default(uuid())
  dateTime    DateTime
  status      AppointmentStatus @default(SCHEDULED)
  doctorId    String
  patientId   String
  doctor      Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  reason      String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([doctorId])
  @@index([patientId])
}

model MedicalRecord {
  id          String    @id @default(uuid())
  patientId   String
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  diagnosis   String
  prescription String?
  notes       String?
  attachments MedicalAttachment[]
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([patientId])
}

model MedicalAttachment {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  fileName        String
  fileType        String
  fileUrl         String
  fileSize        Int?
  uploadedBy      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([medicalRecordId])
}

model EmergencyContact {
  id          String   @id @default(uuid())
  patientId   String   @unique
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  name        String
  relationship String
  phone       String
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}
