generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Hospital {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  state     String
  country   String
  phone     String
  userId    String   @unique
  email     String?  @unique
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctors   Doctor[]
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Doctor {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  phone         String
  speciality    String
  qualification String
  experience    Int
  userId        String      @unique
  hospitalId    String
  available     Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  appointments  Appointment[]
  hospital      Hospital      @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([hospitalId])
}

model Patient {
  id               String            @id @default(uuid())
  firstName        String
  lastName         String
  phone            String
  dateOfBirth      DateTime
  gender           Gender
  address          String
  createdAt        DateTime     @default(now())
  userId           String    @unique
  updatedAt        DateTime          @updatedAt
  appointments     Appointment[]
  emergencyContact EmergencyContact?
  medicalRecords   MedicalRecord[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        String            @id @default(uuid())
  dateTime  DateTime
  status    AppointmentStatus @default(SCHEDULED)
  doctorId  String
  patientId String
  reason    String
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  doctor    Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient   Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([doctorId])
  @@index([patientId])
}

model MedicalRecord {
  id           String              @id @default(uuid())
  patientId    String
  diagnosis    String
  prescription String?
  notes        String?
  date         DateTime            @default(now())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  attachments  MedicalAttachment[]
  patient      Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
}

model MedicalAttachment {
  id              String        @id @default(uuid())
  medicalRecordId String
  fileName        String
  fileType        String
  fileUrl         String
  fileSize        Int?
  uploadedBy      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  @@index([medicalRecordId])
}

model EmergencyContact {
  id           String   @id @default(uuid())
  patientId    String   @unique
  name         String
  relationship String
  phone        String
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  patient      Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime
  token     String?
  hospitalProfile Hospital?
  doctorProfile Doctor?
  patientProfile Patient?

  @@index([email])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum UserRole {
  Hospital
  Doctor
  Patient
  Admin
}
